pipeline {
    agent any

    parameters {
        string defaultValue: 'internalEventListener', description: 'Iflow Name', name: 'name', trim: true
    }

    //Configure the following environment variables before executing the Jenkins Job
    environment {
        IntegrationFlowID = "${name}"
        CPIHost = "${env.CPI_HOST}"
        CPIOAuthHost = "${env.CPI_OAUTH_HOST}"
        CPIOAuthCredentials = "${env.CPI_OAUTH_CRED}"
        GITRepositoryURL  = "${env.GIT_REPOSITORY_URL}"
        GITCredentials = "${env.GIT_CRED}"
        GITBranch = "${env.GIT_BRANCH_NAME}"
        GITFolder = 'IntegrationContent/IntegrationArtefacts'
        GITComment = 'Integration Artefacts update from CICD pipeline'
    }

    stages {
        stage('download integration artefact and store it in GitHub') {
            steps {
                deleteDir()
                script {
                        //clone repo
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: env.GITBranch]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [$class: 'UserIdentity',
                            name: 'Asutosh Maharana',
                            email: 'asutoshmaharana23@gmail.com'
                        	],
                            [$class: 'RelativeTargetDirectory', relativeTargetDir: '.'],
                        //[$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[[$class:'SparseCheckoutPath', path: env.GITFolder]]]
                        ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[
                            credentialsId: env.GITCredentials,
                            url: 'https://' + env.GITRepositoryURL
                        ]]
                    ])

                    //get token
                    println('Request token')
                    def token
                    try {
                        def getTokenResp = httpRequest acceptType: 'APPLICATION_JSON',
                        authentication: env.CPIOAuthCredentials,
                        contentType: 'APPLICATION_JSON',
                        httpMode: 'POST',
                        responseHandle: 'LEAVE_OPEN',
                        timeout: 30,
                        url: 'https://' + env.CPIOAuthHost + '/oauth/token?grant_type=client_credentials'
                        def jsonObjToken = readJSON text: getTokenResp.content
                        token = 'Bearer ' + jsonObjToken.access_token
                       } catch (Exception e) {
                        error("Requesting the oauth token for Cloud Integration failed:\n${e}")
                    }
                    //delete the old flow content so that only the latest content gets stored
                    dir(env.GITFolder + '/' + env.IntegrationFlowID) {
                        deleteDir()
                    }
                    //download and extract artefact from tenant
                    println('Downloading artefact')
                    def tempfile = UUID.randomUUID().toString() + '.zip'
                    def cpiDownloadResponse = httpRequest acceptType: 'APPLICATION_ZIP',
                        customHeaders: [[maskValue: false, name: 'Authorization', value: token]],
                        ignoreSslErrors: false,
                        responseHandle: 'LEAVE_OPEN',
                        validResponseCodes: '100:399, 404',
                        timeout: 30,
                        outputFile: tempfile,
                        url: 'https://' + env.CPIHost + '/api/v1/IntegrationDesigntimeArtifacts(Id=\''+ env.IntegrationFlowID + '\',Version=\'active\')/$value'
                    if (cpiDownloadResponse.status == 404) {
                        //invalid Flow ID
                        error('Received http status code 404. Please check if the Artefact ID that you have provided exists on the tenant.')
                    }
                    def disposition = cpiDownloadResponse.headers.toString()
                    def index = disposition.indexOf('filename') + 9
                    def lastindex = disposition.indexOf('.zip', index)
                    def filename = disposition.substring(index + 1, lastindex + 4)
                    def folder = env.GITFolder + '/' + filename.substring(0, filename.indexOf('.zip'))
                    def zipfolder = env.GITFolder + '/ZipFiles'
                    fileOperations([fileUnZipOperation(filePath: tempfile, targetLocation: folder)])
                    fileOperations([fileRenameOperation(source: tempfile,  destination: filename)])
                    fileOperations([fileCopyOperation(includes: filename,  targetLocation: zipfolder)])
                    env.Filename = filename
                    cpiDownloadResponse.close()

                    //remove the zip
                    fileOperations([fileDeleteOperation(excludes: '', includes: filename)])

                    dir(env.GITFolder) {
                        sh 'git config user.email "asutoshmaharana23@gmail.com"'
                        sh 'git config user.name "Asutosh Maharana"'
                        sh 'git add .'
                    }
                    println('Store integration artefact in Git')
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: env.GITCredentials ,usernameVariable: 'GIT_AUTHOR_NAME', passwordVariable: 'GIT_PASSWORD']]) {
                        sh 'git diff-index --quiet HEAD || git commit -am ' + '\'' + env.GitComment + '\''
                        def maxAttempts = 3
                        def attempt = 1
                        boolean pushSuccess = false

                        while (attempt <= maxAttempts && !pushSuccess) {
                            try {
                            // Attempt the push
                                sh('git pull https://${GIT_PASSWORD}@' + env.GITRepositoryURL + ' HEAD:' + env.GITBranch)
                                sh('git push https://${GIT_PASSWORD}@' + env.GITRepositoryURL + ' HEAD:' + env.GITBranch)
                                pushSuccess = true
                            } catch (Exception pushError) {
                                echo "Push attempt ${attempt} failed with an error: ${pushError}"
                            // Pull changes from the remote repository
                                sh('git pull --rebase https://${GIT_PASSWORD}@' + env.GITRepositoryURL + ' HEAD:' + env.GITBranch)
                            }
                            attempt++
                        }

                        if (!pushSuccess) {
                            echo "Push failed after ${maxAttempts} attempts. Manual intervention required."
                        }
                        
                    }
                    
                }
            }
        }
        stage('Code Analysis') {
            steps {
                script {
                    def zipcpilintfile = 'cpilint-1.0.4.zip'
                    def unzipcpilintfile = 'cpilint'
                    fileOperations([fileUnZipOperation(filePath: zipcpilintfile, targetLocation: unzipcpilintfile)])
                    fileOperations([fileDeleteOperation(excludes: '', includes: zipcpilintfile)])
                    sh "chmod a+rwx -R $WORKSPACE/cpilint"
                    sh "$WORKSPACE/cpilint/cpilint-1.0.4/bin/cpilint -rules $WORKSPACE/rules.xml -files $WORKSPACE/IntegrationContent/IntegrationArtefacts/ZipFiles/${env.Filename}"
                }
            }
        }
    }
}
